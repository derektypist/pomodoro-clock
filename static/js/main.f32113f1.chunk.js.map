{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","require","Clock","mode","timer","className","style","state","alarmColor","id","TimerLengthControl","this","props","titleID","title","minID","value","onClick","lengthID","length","addID","React","Component","Timer","timerControl","active","setState","clearInterval","pomodoro","setInterval","counter","increase","type","brkLength","seshLength","color","audio","play","audioBeep","pause","currentTime","format","reset","preload","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f32113f1.chunk.js","sourcesContent":["import React from 'react';\n\nlet moment = require('moment');\n\n// Display Session or Break Mode and the Time\nconst Clock = ({mode, timer}) => (\n    <div className=\"timer\" style={this.state.alarmColor}>\n                        <div className=\"timer-wrapper\">\n                            <div id='timer-label'>\n                                {mode === 'session' ? 'Session' : 'Break'}\n                            </div>\n                            <div id='time-left'>\n                                {timer}\n                            </div>\n                        </div>\n                    </div>\n);\n\n\n\n// Set Up Components\nclass TimerLengthControl extends React.Component {\n    render() {\n        return (\n            <div className=\"length-control\">\n                <div id={this.props.titleID}>\n                    {this.props.title}\n                </div>\n                <button id={this.props.minID}\n                    className=\"btn-level\" value=\"-\"\n                    onClick={this.props.onClick}>\n                    <i className=\"fa fa-arrow-down fa-2x\" />\n                </button>\n                <div id={this.props.lengthID} className=\"btn-level\">\n                    {this.props.length}\n                </div>\n                <button id={this.props.addID}\n                    className=\"btn-level\" value=\"+\"\n                    onClick={this.props.onClick}>\n                    <i className=\"fa fa-arrow-up fa-2x\" />\n                </button>\n            </div>\n        )\n    }\n};\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        mode: 'session',\n        active: false,\n        brkLength: 5,\n        seshLength: 25,\n        timer: 1500,\n        alarmColor: {color: 'white'}     \n    };\n   \n  }\n    \n  // Updates state when session or break ends and plays sound\n    componentDidUpdate() {\n    if(this.state.timer === 0 && this.state.mode === 'session') {\n      this.setState({ timer: this.state.brkLength * 60, mode: 'break' });\n      this.audio.play();\n    }\n    if(this.state.timer === 0 && this.state.mode === 'break') {\n      this.setState({ timer: this.state.seshLength * 60, mode: 'session' });\n      this.audio.play();\n    } \n\n    if (this.state.timer < 61) {\n        this.setState({alarmColor: {color: 'orangered'}});\n    } else {\n        this.setState({alarmColor: {color: 'white'}});\n    }\n  }\n\n  // Play or Pause and Start Timer\n  timerControl = () => {\n      if(this.state.active) {\n          this.setState({active: false}, () => clearInterval(this.pomodoro));\n      } else {\n          this.setState({active: true}, () => this.pomodoro = setInterval(() => this.setState({timer: this.state.timer - 1})));\n      }\n  }\n \n  // Increase or Decrease a Timer\n  counter = (increase, type) => {\n      this.setState({[type]: this.state[type] + (increase ? 1 : -1)});\n  }\n\n    \n         \n// Resets Timer\n        reset() {\n            this.setState({\n            mode: 'session',\n            active: false,\n            brkLength: 5,\n            seshLength: 25,\n            timer: 1500,\n            alarmColor: {color: 'white'}\n            \n        });\n        \n        clearInterval(this.pomodoro);\n        this.audioBeep.pause();\n        this.audioBeep.currentTime = 0;\n        }\n\n        render() {\n            return (\n                <div>\n                    <div className=\"main-title\">Pomodoro Clock</div>\n                    <Clock \n                    mode={this.state.mode}\n                    timer={moment(this.state.timer).format('mm:ss')}/>\n                    <TimerLengthControl titleID=\"break-label\"\n                    minID=\"break-decrement\"\n                    addID=\"break-increment\"\n                    lengthID=\"break-length\"\n                    title=\"Break Length\" \n                    onClick={this.counter}\n                    length={this.state.brkLength}/>\n\n                    <TimerLengthControl \n                    titleID=\"session-label\" \n                    minID=\"session-decrement\"\n                    addID=\"session-increment\"\n                    lengthID=\"session-length\"\n                    title=\"Session Length\" \n                    onClick={this.counter} \n                    length={this.state.seshLength}/>\n\n                    \n\n                     <div className=\"timer-control\">\n                        <button id=\"start_stop\" onClick={this.timerControl}>\n                            <i className=\"fa fa-play fa-2x\"/>\n                            <i className=\"fa fa-pause fa-2x\"/>\n                        </button>\n                        <button id=\"reset\" onClick={this.reset}>\n                            <i className=\"fa fa-refresh fa-2x\"/>\n                        </button>\n                    </div>\n\n                    <audio id=\"beep\" preload=\"auto\" \n                        src=\"https://goo.gl/65cBl1\"\n                        ref={(audio) => { this.audioBeep = audio; }} />\n                </div>\n\n\n            )\n        }\n    };\n\nexport default Timer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <Timer />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}